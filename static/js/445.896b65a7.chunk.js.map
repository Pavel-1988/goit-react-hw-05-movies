{"version":3,"file":"static/js/445.896b65a7.chunk.js","mappings":"4QAEaA,EAAQC,EAAAA,GAAAA,MAAH,2X,GAoBOA,EAAAA,GAAAA,MAAH,yW,QCXP,SAASC,IAAW,IAAD,EAE1BC,GAAWC,EAAAA,EAAAA,MAEjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAM,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,GAkD7C,OA5BAC,EAAAA,EAAAA,YAAU,WACFF,GAGNG,MAAM,2GAAD,OACwGH,EADxG,gCAGFI,MAAK,SAAAC,GACJ,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,IAAIC,MAAM,2BACjC,IACAN,MAAK,SAAAO,GACJ,OAAsB,IAAlBA,EAAMC,QACDC,EAAAA,GAAAA,MACL,wDAGGjB,GAAU,OAAIe,EAAMC,SAC5B,IACFE,OAAM,SAAAC,GACH,OAAOF,EAAAA,GAAAA,MAAYE,EAAMC,QAC1B,GAEN,GAAC,CAAChB,KAIC,UAAC,KAAD,YACE,kBAAOiB,SA1CU,SAAAC,GACnBA,EAAEC,iBAMFC,QAAQC,IAAI,mFAEb,EAiCG,WACC,SAAChC,EAAD,CACGiC,MAAOtB,EACPuB,SArDc,SAAAL,GACpB,IAAMI,EAAQJ,EAAEM,cAAcF,MAC7BvB,EAA0B,KAAVuB,EAAe,CAAEtB,OAAQsB,GAAU,CAAC,GACrDF,QAAQC,IAAIC,EAGb,EAgDOG,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAId,2CAEF,SAAC,KAAD,UACGjC,EAAOkC,KACN,YAAqE,IAAlEC,EAAiE,EAAjEA,YAAaC,EAAoD,EAApDA,GAAIC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eACvCC,EAAO,IAAIC,KAAKH,GAAcI,cAC9BC,EAAQ,IAAIF,KAAKF,GAAgBG,cACvC,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAYE,GAAE,UAAKT,GAAMU,MAAO,CAAEC,KAAMlD,GAAxC,WACE,gBACEmD,IACEb,EAAW,uDACyCA,GAChD,iFAENc,IAAG,OAAEZ,QAAF,IAAEA,EAAAA,EAASC,KAEhB,iCACGA,QADH,IACGA,EAAAA,EAAQD,EADX,KACoBI,GAAQG,EAD5B,WAVYR,EAgBnB,OAGJ,SAAC,EAAAc,SAAD,WAAU,SAAC,KAAD,QAKhB,C","sources":["Pages/movies/Movies.styled.js","Pages/movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 20px;\n  font-size: 15px;\n  margin-right: 3px;\n  border-radius: 4px;\n  &:focus-within {\n    outline-color: orangered !important;\n  }\n  &:focus-visible {\n    outline-color: orangered !important;\n  }\n  &:focus {\n    outline-color: orangered !important;\n  }\n  &:active {\n    outline-color: orangered !important;\n  }\n`;\n\nexport const SearchBtn = styled.input`\n  padding: 4px 8px;\n  background-color: orangered;\n  color: white;\n  border-radius: 4px;\n  border-color: orangered;\n  margin-left: 5px;\n  font-weight: bold;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n`;","import { useState, useEffect, Suspense } from 'react';\n// import { useForm } from 'react-hook-form';\nimport { Outlet, useSearchParams, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Container,MovieList, MovieItem, MovieLink } from '../home/Home.styled';\nimport { Input } from './Movies.styled';\n\n// import defaultImg from '../../default.png'\n\n\nexport default function Movies()  {\n\n  const location = useLocation();\n\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  \n  const filter = searchParams.get('filter') ?? '';\n\n  const selectedMovie = e => {\n    const value = e.currentTarget.value;\n     setSearchParams(value !== '' ? { filter: value } : {});\n    console.log(value)\n\n\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // if (filter.trim() === '') {\n      \n    //   return toast.info('Please select an movie');\n    // }\n\n    console.log('нажал на кнопку')\n\n  };\n\n\n  useEffect(() => {\n     if (!filter) {\n      return;\n    }\n    fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=bfc78256055c27ed6be30c1c43cfe9c3&language=en-US&query=${filter}&page=1&include_adult=false`\n    )\n      .then(res => {\n        if (res.ok) {\n          return res.json()\n        }\n        return Promise.reject(new Error('Change your serch query'))\n      })\n      .then(movie => {\n        if (movie.results === 0) {\n          return toast.error(\n            'Something went wrong. Try changing your search query'\n          );\n        }\n        return setMovies([...movie.results]);\n      })\n    .catch(error => {\n        return toast.error(error.message);\n      });\n    \n},[filter])\n\n\n  return (\n    <Container>\n      <form  onSubmit={handleSubmit} >\n       <Input\n          value={filter}\n          onChange={selectedMovie}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        {/* {errors.filter && <span>Field is required</span>} */}\n\n        <button >Search</button>\n      </form>\n      <MovieList>\n        {movies.map(\n          ({ poster_path, id, title, name, release_date, first_air_date }) => {\n            const date = new Date(release_date).getFullYear();\n            const date2 = new Date(first_air_date).getFullYear();\n            return (\n              <MovieItem key={id}>\n                <MovieLink  to={`${id}`} state={{ from: location }}>\n                  <img\n                    src={\n                      poster_path\n                        ? `https://image.tmdb.org/t/p/w220_and_h330_face${poster_path}`\n                        : 'https://motivatevalmorgan.com/wp-content/uploads/2016/06/default-movie-1-3.jpg'\n                    }\n                    alt={title ?? name}\n                  ></img>\n                  <h4>\n                    {name ?? title} ({date || date2})\n                  </h4>\n                </MovieLink>\n              </MovieItem>\n            );\n          }\n        )}\n      </MovieList>\n       <Suspense><Outlet/></Suspense>\n    </Container>\n\n  )\n  \n}"],"names":["Input","styled","Movies","location","useLocation","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","filter","get","useEffect","fetch","then","res","ok","json","Promise","reject","Error","movie","results","toast","catch","error","message","onSubmit","e","preventDefault","console","log","value","onChange","currentTarget","type","autoComplete","autoFocus","placeholder","map","poster_path","id","title","name","release_date","first_air_date","date","Date","getFullYear","date2","to","state","from","src","alt","Suspense"],"sourceRoot":""}